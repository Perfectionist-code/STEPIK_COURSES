# Подвиг 4. Объявите функцию с именем get_list, одним параметром и следующим описанием в теле функции:
#
# '''Функция для формирования списка целых значений'''
#
# Сама функция должна формировать и возвращать список целых чисел, который передается ей на вход в виде строки из целых чисел, записанных через пробел.
#
# Определите декоратор, который выполняет суммирование значений списка, возвращаемого декорируемой функцией и возвращает результат. Внутри декоратора декорируйте переданную функцию с помощью команды @wraps (не забудьте сделать импорт: from functools import wraps).
#
# Такое декорирование необходимо, чтобы исходная функция get_list сохраняла свои локальные свойства: __name__ и __doc__.
#
# Примените декоратор к функции get_list, но не вызывайте ее.

from functools import wraps

def make_sum(func):
    @wraps(func)
    def wrapper(_str1):
        _sum = sum(func(_str1))
        return _sum

    return wrapper


@make_sum
def get_list(_str1):
    """Функция для формирования списка целых значений"""
    res_lst = [int(x) for x in _str1.split()]
    return res_lst



s = get_list("1 2 3 -1 -2 -3")
print(s)
# _str1 = input()
# # s = get_list("1 2 3 -1 -2 -3")
# print(get_list(_str1))
# print(get_list.__name__)
# print(get_list.__doc__)





